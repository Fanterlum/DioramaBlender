[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://fkan2c8ara63"]

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_ngvdd"]
parameter_name = "Grid"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_pmubt"]
operator = 2

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ul7iw"]
output_port_for_preview = 0
parameter_name = "Color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_qjtev"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_26hj6"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_h60se"]
parameter_name = "Texture"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_g1mpr"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8vviw"]
constant = 1.0

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, world_vertex_coords;

uniform sampler2D Texture;
uniform sampler2D Grid;
uniform vec4 Color : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
	vec4 n_out6p0;
// Texture2D:6
	n_out6p0 = texture(Texture, UV);


// TextureParameterTriplanar:2
	vec4 n_out2p0 = triplanar_texture(Grid, triplanar_power_normal, triplanar_pos);


// ColorParameter:4
	vec4 n_out4p0 = Color;


// FloatConstant:9
	float n_out9p0 = 1.000000;


// VectorOp:8
	vec3 n_out8p0 = vec3(n_out4p0.xyz) * vec3(n_out9p0);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0.xyz) * n_out8p0;


// VectorOp:5
	vec3 n_out5p0 = vec3(n_out6p0.xyz) * n_out3p0;


// Output:0
	ALBEDO = n_out5p0;


}
"
modes/cull = 2
flags/world_vertex_coords = true
nodes/fragment/0/position = Vector2(520, -20)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_ngvdd")
nodes/fragment/2/position = Vector2(-380, -220)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_pmubt")
nodes/fragment/3/position = Vector2(120, -40)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_ul7iw")
nodes/fragment/4/position = Vector2(-560, 100)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_qjtev")
nodes/fragment/5/position = Vector2(340, -80)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_26hj6")
nodes/fragment/6/position = Vector2(40, -200)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_h60se")
nodes/fragment/7/position = Vector2(-380, -520)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorOp_g1mpr")
nodes/fragment/8/position = Vector2(-60, 100)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatConstant_8vviw")
nodes/fragment/9/position = Vector2(-280, 280)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 6, 0, 5, 0, 7, 0, 6, 2, 4, 0, 8, 0, 9, 0, 8, 1, 8, 0, 3, 1, 3, 0, 5, 1, 5, 0, 0, 0)
